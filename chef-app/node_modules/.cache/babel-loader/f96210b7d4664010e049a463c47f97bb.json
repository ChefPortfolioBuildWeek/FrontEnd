{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\User\\\\Documents\\\\Web24\\\\Build Week\\\\Frontend\\\\chef-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\User\\\\Documents\\\\Web24\\\\Build Week\\\\Frontend\\\\chef-app\\\\src\\\\ChefLogin.js\";\nimport React, { useState, useEffect } from 'react';\nimport { withFormik, Form, Field } from 'formik';\nimport * as Yup from 'yup';\nimport axios from 'axios';\n\nconst ChefOnboarding = ({\n  values,\n  touched,\n  errors,\n  status\n}) => {\n  const _useState = useState([]),\n        _useState2 = _slicedToArray(_useState, 2),\n        chefs = _useState2[0],\n        setChefs = _useState2[1];\n\n  useEffect(() => {\n    status && setChefs(chefs => [...chefs, status]);\n  }, [status]);\n\n  const routeToChefPostPage = () => {\n    props.history.push('/chefposts');\n  };\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17\n    },\n    __self: this\n  }, React.createElement(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18\n    },\n    __self: this\n  }, \"Login / Create New Chef Profile\"), React.createElement(Form, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19\n    },\n    __self: this\n  }, React.createElement(Field, {\n    type: \"text\",\n    name: \"name\",\n    placeholder: \"name\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20\n    },\n    __self: this\n  }), touched.name && errors.name && React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26\n    },\n    __self: this\n  }, errors.name), React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27\n    },\n    __self: this\n  }), React.createElement(Field, {\n    type: \"text\",\n    name: \"email\",\n    placeholder: \"email\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28\n    },\n    __self: this\n  }), touched.email && errors.email && React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34\n    },\n    __self: this\n  }, errors.email), React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35\n    },\n    __self: this\n  }), React.createElement(Field, {\n    type: \"password\",\n    name: \"password\",\n    placeholder: \"password\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36\n    },\n    __self: this\n  }), touched.password && errors.password && React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42\n    },\n    __self: this\n  }, errors.password), React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    },\n    __self: this\n  }), React.createElement(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }, \"Terms Of Service\"), React.createElement(Field, {\n    type: \"checkbox\",\n    name: \"termsOfService\",\n    checked: values.termsOfService,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }), React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  }), React.createElement(\"button\", {\n    type: \"submit\",\n    onClick: routeToChefPostPage,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  }, \"Login\")));\n};\n\nconst FormikChefOnboarding = withFormik({\n  mapPropsToValues({\n    name,\n    email,\n    password,\n    termsOfService\n  }) {\n    return {\n      name: name || '',\n      email: email || '',\n      password: password || '',\n      termsOfService: termsOfService || false\n    };\n  },\n\n  validationSchema: Yup.object().shape({\n    name: Yup.string().required('Name is a required field'),\n    email: Yup.string().required('Email is a required field'),\n    password: Yup.string().required('Password is a required field')\n  }),\n\n  handleSubmit(values, {\n    setStatus\n  }) {\n    axios.post('https://reqres.in/api/users', values).then(res => {\n      setStatus(res.data);\n    }).catch(err => console.log(err.response));\n  }\n\n})(ChefOnboarding);\nexport default FormikChefOnboarding;","map":{"version":3,"sources":["C:\\Users\\User\\Documents\\Web24\\Build Week\\Frontend\\chef-app\\src\\ChefLogin.js"],"names":["React","useState","useEffect","withFormik","Form","Field","Yup","axios","ChefOnboarding","values","touched","errors","status","chefs","setChefs","routeToChefPostPage","props","history","push","name","email","password","termsOfService","FormikChefOnboarding","mapPropsToValues","validationSchema","object","shape","string","required","handleSubmit","setStatus","post","then","res","data","catch","err","console","log","response"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from 'react';\r\nimport {withFormik, Form, Field} from 'formik';\r\nimport * as Yup from 'yup';\r\nimport axios from 'axios';\r\n\r\nconst ChefOnboarding = ({values, touched, errors, status}) => {\r\n    const [chefs, setChefs] = useState([]);\r\n    useEffect(() => {\r\n        status && setChefs(chefs => [...chefs, status])\r\n    }, [status])\r\n\r\n    const routeToChefPostPage = () => {\r\n        props.history.push('/chefposts');\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <h1>Login / Create New Chef Profile</h1>\r\n            <Form>\r\n                <Field\r\n                type='text'\r\n                name='name'\r\n                placeholder='name'\r\n                />\r\n                {touched.name && errors.name && (\r\n                    <p>{errors.name}</p>\r\n                )}<br />\r\n                <Field\r\n                type='text'\r\n                name='email'\r\n                placeholder='email'\r\n                />\r\n                {touched.email && errors.email && (\r\n                    <p>{errors.email}</p>\r\n                )}<br />\r\n                <Field\r\n                type='password'\r\n                name='password'\r\n                placeholder='password'\r\n                />\r\n                {touched.password && errors.password && (\r\n                    <p>{errors.password}</p>\r\n                )}<br />\r\n                <h2>Terms Of Service</h2>\r\n                <Field\r\n                type='checkbox'\r\n                name='termsOfService'\r\n                checked={values.termsOfService}\r\n                /><br />\r\n                <button type='submit' onClick={routeToChefPostPage}>Login</button>\r\n            </Form>\r\n            {/* {chefs.map(chef => (\r\n                <div key={chef.id}>\r\n                    <p>Name: {chef.name}</p>\r\n                    <p>Email: {chef.email}</p>\r\n                    <p>Password Length: {chef.password.length}</p>\r\n                </div>\r\n            ))} */}\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\nconst FormikChefOnboarding = withFormik({\r\n    mapPropsToValues({name, email, password, termsOfService}) {\r\n        return {\r\n            name: name || '',\r\n            email: email || '',\r\n            password: password || '',\r\n            termsOfService: termsOfService || false\r\n        };\r\n    },\r\n    validationSchema: Yup.object().shape({\r\n        name: Yup.string().required('Name is a required field'),\r\n        email: Yup.string().required('Email is a required field'),\r\n        password: Yup.string().required('Password is a required field'),\r\n    }),\r\n    handleSubmit(values, {setStatus}) {\r\n        axios\r\n            .post('https://reqres.in/api/users', values)\r\n            .then(res => {setStatus(res.data);})\r\n            .catch(err => console.log(err.response));\r\n    }\r\n})(ChefOnboarding);\r\nexport default FormikChefOnboarding;"]},"metadata":{},"sourceType":"module"}